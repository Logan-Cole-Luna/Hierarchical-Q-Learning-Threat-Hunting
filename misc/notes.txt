XAI:
1. explain_*_predictions:
- Binary version:

Uses TreeExplainer (optimized for XGBoost/tree-based models)
Handles binary classification (2 classes)
Works directly with scikit-learn/XGBoost models
Generates simpler SHAP values (one or two sets for binary case)
- RL version:

Uses KernelExplainer (works with any model, including ONNX)
Handles multi-class classification
Works with ONNX inference sessions
Generates more complex SHAP values (one set per class)

2. analyze_*_misclassifications:
- Binary version:

Only needs to consider false positives/negatives
Simpler SHAP value handling (usually just uses positive class)
Visualization focuses on binary decision boundary
- RL version:

Handles confusion between multiple classes
More complex SHAP value averaging across classes
Visualization shows feature importance for all misclassification types

3. generate_*_explanation:
- Binary version:

Only generates explanations for two classes (benign/malicious)
Simpler confidence calculation
Returns explanations focused on binary decision
- RL version:

Generates explanations for all possible classes
More complex confidence calculation considering all class impacts
Returns ranked explanations across all classes with relative confidences



Dataset Info:
	1.	Destination Port: Port number of the destination (receiver).
	2.	Flow Duration: Time duration of the network flow (milliseconds).
	3.	Total Fwd Packets and Total Backward Packets: Counts of packets sent in the forward and backward directions.
	4.	Total Length of Fwd Packets and Total Length of Bwd Packets: Sum of the payload bytes of packets in forward and backward directions.
	5.	Fwd Packet Length Max/Min/Mean/Std: Descriptive statistics (maximum, minimum, mean, and standard deviation) of packet lengths in the forward direction.
	6.	Bwd Packet Length Max/Min/Mean/Std: Similar statistics for packet lengths in the backward direction.
	7.	Flow Bytes/s and Flow Packets/s: Flow byte rate and packet rate over time.
	8.	Flow IAT Mean/Std/Max/Min: Inter-arrival times (IAT) of packets within the flow, with descriptive statistics (mean, standard deviation, max, min).
	9.	Fwd IAT Total/Mean/Std/Max/Min: Inter-arrival times specifically for packets in the forward direction.
	10.	Bwd IAT Total/Mean/Std/Max/Min: Inter-arrival times for packets in the backward direction.
	11.	Fwd PSH Flags and Bwd PSH Flags: Counts of “push” flags in forward and backward directions, indicating data that should be immediately pushed to the receiving application.
	12.	Fwd URG Flags and Bwd URG Flags: Counts of “urgent” flags, signaling high-priority data.
	13.	Fwd Header Length and Bwd Header Length: Header lengths of packets in forward and backward directions.
	14.	Fwd Packets/s and Bwd Packets/s: Rates of packets per second in forward and backward directions.
	15.	Min Packet Length / Max Packet Length / Packet Length Mean / Std / Variance: Descriptive statistics of the packet lengths across the flow.
	16.	Flag Counts (e.g., FIN, SYN, RST, PSH, ACK, URG, CWE, ECE): Counts of TCP flags used in packet headers, which indicate the state and control functions of the packets (e.g., SYN for connection start, FIN for finish).
	17.	Down/Up Ratio: Ratio of backward to forward packets.
	18.	Average Packet Size: Mean packet size across the flow.
	19.	Avg Fwd Segment Size / Avg Bwd Segment Size: Average sizes of segments in forward and backward directions.
	20.	Bulk Features (e.g., Fwd Avg Bytes/Bulk, Fwd Avg Packets/Bulk): Bulk statistics showing average bytes and packets in a data burst.
	21.	Subflow Fwd Packets / Subflow Fwd Bytes / Subflow Bwd Packets / Subflow Bwd Bytes: Statistics about smaller parts (subflows) of the larger flow in terms of packets and bytes.
	22.	Init_Win_bytes_forward / Init_Win_bytes_backward: Initial TCP window sizes in forward and backward directions.
	23.	Active / Idle Times (Mean, Std, Max, Min): Times that indicate active and idle states of the flow, with statistics.
	24.	Label: Classification of the flow (e.g., “BENIGN” indicates normal traffic, while other labels might represent different types of attacks).



# Hierarchical Q-Learning for Network Threat Detection

A deep reinforcement learning approach to network intrusion detection using hierarchical Q-learning. This project implements a two-stage classification system: a binary classifier for initial threat detection and a multi-class classifier for specific attack categorization.

## Project Overview

### Performance Metrics

#### Binary Classification Results
- Overall Accuracy: 99.977%
- Benign Traffic (1,935,399 samples):
  - Precision: 99.978%
  - Recall: 99.996%
  - F1-Score: 99.987%
- Malicious Traffic (242,405 samples):
  - Precision: 99.970%
  - Recall: 99.822%
  - F1-Score: 99.896%

#### Multi-Class Classification Results
- Overall Accuracy: 99.684%
- Attack-specific Performance:
  - Botnet (28,907 samples):
    - Precision: 99.787%
    - Recall: 98.862%
    - F1-Score: 99.322%
  - Brute-force (18,820 samples):
    - Precision: 98.703%
    - Recall: 99.915%
    - F1-Score: 99.306%
  - DDoS (155,191 samples):
    - Precision: 99.717%
    - Recall: 100.000%
    - F1-Score: 99.858%
  - DoS (39,314 samples):
    - Precision: 99.959%
    - Recall: 99.372%
    - F1-Score: 99.665%
  - Web Attacks (173 samples):
    - Requires additional training data

### Architecture

1. **Binary Classification Stage**
   - Distinguishes between benign and malicious traffic
   - Fast initial filtering of network traffic
   - Optimized for high recall to minimize false negatives
   - Uses XGBoost-based classification with SHAP explanations
   - Achieves 99.97% accuracy on test data

2. **Multi-Class Classification Stage**
   - Detailed classification of malicious traffic into specific attack types
   - Categories: DoS/DDoS, Web Attacks, Brute Force, Botnet attacks
   - Only processes traffic flagged as malicious by binary classifier
   - Achieves 99.68% overall accuracy on attack classification

## Technical Architecture

### Agent Design

1. **Binary Classification Agent**
   - XGBoost-based classifier optimized for fast initial screening
   - Features:
     - TreeExplainer integration for SHAP value generation
     - Real-time feature importance tracking
     - Configurable class weight balancing
     - Automated feature selection and preprocessing
   - Decision Process:
     - Input: Network flow features (packet length, protocol, flow metrics)
     - Output: Binary classification (benign/malicious)
     - Confidence scoring with SHAP-based explanations
     - Threshold-based decision boundaries with configurable sensitivity

2. **Multi-Class RL Agent**
   - Hierarchical Q-Learning architecture
   - State Space:
     - Network flow features
     - Binary agent confidence scores
     - Historical context window
   - Action Space:
     - Attack type classification (DoS/DDoS, Botnet, etc.)
     - Confidence threshold adjustment
     - Feature importance weighting
   - Reward Structure:
     - Immediate reward for correct classification
     - Penalty for false positives/negatives
     - Time-based efficiency bonus
     - Confidence calibration rewards

### Feature Engineering

1. **Network Flow Features**
   - Temporal Features:
     - Flow duration
     - Inter-arrival time statistics
     - Time-based traffic patterns
   - Volume Features:
     - Bytes/packets per second
     - Packet size distribution
     - Flow volume metrics
   - Protocol Features:
     - Protocol type encoding
     - Port number analysis
     - Flag combinations
   - Behavioral Features:
     - Connection patterns
     - Service request frequencies
     - Error rate analysis

### Learning Process

1. **Training Pipeline**
   - Two-stage training approach:
     1. Binary Agent Training:
        - XGBoost optimization with cross-validation
        - SHAP-guided feature selection
        - Class weight optimization
        - Model performance monitoring
     2. Multi-Class Agent Training:
        - Experience replay buffer management
        - Epsilon-greedy exploration strategy
        - Dynamic Q-value updates
        - Reward shaping based on confidence

2. **Optimization Techniques**
   - Batch processing optimization
   - GPU acceleration support
   - Memory-efficient data handling
   - Dynamic batch sizing
   - Early stopping with validation monitoring

### Real-time Operations

1. **Inference Pipeline**

### System Benefits

1. **High Accuracy**
   - Binary classification accuracy of 99.977% across 2.17M samples
   - Multi-class classification accuracy of 99.684% for attack types
   - Extremely low false positive rate (0.022% for benign traffic)

2. **Scalability**
   - Efficient two-stage processing pipeline
   - Handles large-scale traffic analysis (2.17M+ samples tested)
   - Optimized for real-time classification

3. **Interpretability**
   - SHAP-based explanation system
   - Feature importance tracking
   - Decision confidence metrics
   - Misclassification analysis

4. **Adaptability**
   - Dynamic threshold adjustment
   - Continuous learning capabilities
   - Performance monitoring and adaptation
